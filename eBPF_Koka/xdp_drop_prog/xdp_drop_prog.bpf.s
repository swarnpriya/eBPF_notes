xdp_drop_prog.bpf.o:    file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <xdp_drop_prog>:
;     return 0;
       0:       b7 06 00 00 01 00 00 00 r6 = 1
; }
       1:       61 12 04 00 00 00 00 00 r2 = *(u32 *)(r1 + 4)
; 
       2:       61 11 00 00 00 00 00 00 r1 = *(u32 *)(r1 + 0)
;     void *data_end = (void *)(long)ctx->data_end;
       3:       bf 13 00 00 00 00 00 00 r3 = r1
       4:       07 03 00 00 0e 00 00 00 r3 += 14
       5:       2d 23 17 00 00 00 00 00 if r3 > r2 goto +23 <LBB0_5>
;     __u16 h_proto;
       6:       71 12 0c 00 00 00 00 00 r2 = *(u8 *)(r1 + 12)
       7:       71 17 0d 00 00 00 00 00 r7 = *(u8 *)(r1 + 13)
       8:       67 07 00 00 08 00 00 00 r7 <<= 8
       9:       4f 27 00 00 00 00 00 00 r7 |= r2
      10:       b7 06 00 00 02 00 00 00 r6 = 2
;     int arr[1024] = {1,};
      11:       15 07 11 00 00 00 00 00 if r7 == 0 goto +17 <LBB0_5>
      12:       b7 08 00 00 00 00 00 00 r8 = 0

0000000000000068 <LBB0_3>:
;     int sum = 0;
      13:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 r1 = 0 ll
      15:       b7 02 00 00 1b 00 00 00 r2 = 27
      16:       bf 73 00 00 00 00 00 00 r3 = r7
      17:       85 00 00 00 06 00 00 00 call 6
;     int arr[1024] = {1,};
      18:       07 08 00 00 01 00 00 00 r8 += 1
      19:       bf 81 00 00 00 00 00 00 r1 = r8
      20:       67 01 00 00 20 00 00 00 r1 <<= 32
      21:       77 01 00 00 20 00 00 00 r1 >>= 32
      22:       2d 17 f6 ff 00 00 00 00 if r7 > r1 goto -10 <LBB0_3>
;         arr[i] = i + (int) h_proto;
      23:       15 07 01 00 08 00 00 00 if r7 == 8 goto +1 <LBB0_4>
      24:       05 00 04 00 00 00 00 00 goto +4 <LBB0_5>

00000000000000c8 <LBB0_4>:
;         sum += arr[i];
      25:       18 01 00 00 1b 00 00 00 00 00 00 00 00 00 00 00 r1 = 27 ll
      27:       b7 02 00 00 18 00 00 00 r2 = 24
      28:       85 00 00 00 06 00 00 00 call 6

00000000000000e8 <LBB0_5>:
;         return XDP_DROP;
      29:       bf 60 00 00 00 00 00 00 r0 = r6
      30:       95 00 00 00 00 00 00 00 exit
